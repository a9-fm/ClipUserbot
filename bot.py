#!/usr/bin/python
# -*- coding: utf-8 -*-
import pip

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import time, random, datetime, asyncio, sys, wikipedia, logging, aiohttp, covid, pyrogram, os, wget, bs4
except ModuleNotFoundError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π...\n")
    pip.main(['install', 'tgcrypto'])
    pip.main(['install', 'pyrogram'])
    pip.main(['install', 'covid'])
    pip.main(['install', 'aiohttp'])
    pip.main(['install', 'wikipedia'])
    pip.main(['install', 'logging'])
    pip.main(['install', 'wget'])
    pip.main(['install', 'bs4'])
    import os
    os.execl(sys.executable, sys.executable, *sys.argv)
    quit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
with open("config.ini", "w+") as f:
    rep = """[pyrogram]
api_id = 2860432
api_hash = 2fde6ca0f8ae7bb58844457a239c7214
app_version = 1.6.4.1
device_model = Terminal | By a9fm userbot | CLIP USERBOT |
"""
    repo = str(rep)
    f.write(repo)
    f.close()

from pyrogram import Client, filters
from pyrogram.errors import FloodWait, ChatSendMediaForbidden
from pyrogram.types import Message
from time import sleep, perf_counter
from pyrogram.handlers import MessageHandler
from covid import Covid
from aiohttp import ClientSession
from bs4 import BeautifulSoup
import time, random, datetime, asyncio, sys, wikipedia, requests, json
from urllib.request import urlopen

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
rep = os.path.exists('rep.txt')
if rep == True:
    print("work...")
else:
    with open("rep.txt", "w+") as f:
        rep = "0"
        repo = str(rep)
        f.write(repo)
        f.close()

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
os.system('cls' if os.name == 'nt' else 'clear')

urli = "https://api.telegram.org/bot1881936428:AAHURe4DqQ_GCrqcGfSwiejMcEtY7kuX2vk/getChatMembersCount?chat_id=@arturdestroyerbot"
with urlopen(urli) as f:
   respi = json.load(f)
countsi = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —é–∑–µ—Ä–±–æ—Ç–æ–º: " + str(respi['result'])

logotip = """
  ____ _     ___ _____
 / ___| |   |_ _|  _  |
| |   | |    | || |_) |
| |___| |___ | ||  ___|
 \____|_____|___|_|
    _       ___            _____   __  __
   / \     / _ \          |  ___| |  \/  |
  / _ \   | (_) |  _____  | |_    | |\/| |
 / ___ \   \__, | |_____| |  _|   | |  | |
/_/   \_\    /_/          |_|     |_|  |_|

Telegram –ö–∞–Ω–∞–ª - @ArturDestroyerBot
–ü–æ–º–æ—â—å - @Artur_destroyer\n\n"""

logi = "\n\n–õ–æ–≥–∏:"
print(logotip + countsi + logi)

# –õ–æ–≥–∏ + –í—Ö–æ–¥
app = Client("my_account")
import logging

# –í—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É [–û–±–Ω–æ–≤–ª–µ–Ω–∏—è]
with app:
         app.join_chat('ArturDestroyerBot') # –ü—Ä–æ—à—É, –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

# –ü–æ–º–æ—â—å | –ò–Ω—Ñ–∞ –ø—Ä–æ —é–∑–µ—Ä–±–æ—Ç–∞
@app.on_message(filters.command("help" , prefixes=".") & filters.me)
async def info(client: Client, message: Message):
    await message.edit("""<b><a href="https://t.me/ArturDestroyerBot">UserBot CLIP 1.6.4.1</a></b>
<b><a href="https://t.me/artur_destroyer">–°–æ–∑–¥–∞—Ç–µ–ª—å</a></b>
<a href="https://github.com/A9FM/ClipUserbot">GitHub –ü—Ä–æ–µ–∫—Ç–∞</a>
<a href="https://github.com/A9FM/filesUB/blob/main/README.md">¬© Copyright ClipUSERBOT</a>

<b>–ö–æ–º–∞–Ω–¥—ã</b>

–û—Å–Ω–æ–≤–Ω—ã–µ:
<code>.help</code> - –ü–æ–º–æ—â—å | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è | –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
<code>.ping</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–∏–Ω–≥–∞ –±–æ—Ç–∞ [–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª–∫–ª—é—á–µ–Ω–∏—è]
<code>.restart</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ [–û—à–∏–±–∫–∞, –ë–∞–≥ –≤ –±–æ—Ç–µ]
<code>.update</code> - –û–±–Ω–æ–≤–∏—Ç—å

–ú–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–∏:
<code>.afk</code> [–ü—Ä–∏—á–∏–Ω–∞] - –í–≤–æ–π—Ç–∏ –≤ –ê–§–ö [–ù–µ –≤ —Å–µ—Ç–∏]
<code>.unafk</code> - –í—ã–π—Ç–∏ –∏–∑ –ê–§–ö
<code>.wiki</code> [–°–ª–æ–≤–æ] - –ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
<code>.covid</code> [–°—Ç—Ä–∞–Ω–∞] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –≤–∏—Ä—É—Å–æ–º covid-19 [–ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å]
<code>.weather</code> [–ì–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞

–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏:
<code>.hack</code> - –í–∑–ª–æ–º –ü–µ–Ω—Ç–∞–≥–æ–Ω–Ω–∞
<code>.jopa</code> - –í–∑–ª–æ–º –∂–æ–ø—ã
<code>.mum</code> - –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏
<code>.drugs</code> - –ü—Ä–∏–Ω—è—Ç—å 3a–ü—ÄE—âEHHblE B–µ—âECTB–∞

–°–ø–∞–º:
<code>.spam</code> [–ö–æ–ª-–≤–æ —Å–º—Å] [–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
<code>.spamt</code> - –°–ø–∞–º –¢–µ–∫—Å—Ç–æ–º
<code>.spams</code> - –°–ø–∞–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏
<code>.stop</code> - –°—Ç–æ–ø —Å–ø–∞–º

–ü–ª—é—à–∫–∏:
<code>.type</code> - –≠—Ñ—Ñ–µ–∫—Ç –ü–µ—á–∞—Ç–∏
<code>.hide</code> - –°–æ–æ–±—â–µ–Ω–∏—è —Å –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ–º
<code>.sw</code> - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å–∫–ª–∞–¥–∫–∏ [–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ —Ç–∏–ø—É ghbdtn]
<code>.pin</code> - –ó–∞–∫—Ä–µ–ø–∏—Ç—å
<code>.unpin</code> - –û—Ç–∫—Ä–µ–ø–∏—Ç—å
<code>.short</code> [–°—Å—ã–ª–∫–∞] - —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫
<code>.tagall</code> - –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
<code>.id</code> - –ê–π–¥–∏
<code>.info</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
<code>.usd</code> - –ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞
<code>.eur</code> - –ö—É—Ä—Å –ï–≤—Ä–æ
<code>.qr</code> [–¢–µ–∫—Å—Ç] - –°–æ–∑–¥–∞–Ω–∏–µ QR-–ö–æ–¥–∞ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º
<code>.time</code> - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
<code>.ladder</code> - –õ–µ—Å–µ–Ω–∫–∞ <a href="https://github.com/A9FM/filesUB/blob/main/ladder.md">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>
<code>.webshot</code> [–°—Å—ã–ª–∫–∞] - –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:
<code>.ban</code> - –ë–∞–Ω
<code>.unban</code> - –†–∞–∑–±–∞–Ω
<code>.kick</code> - –ö–∏–∫
<code>.mute</code> - –ú—É—Ç
<code>.unmute</code> - –†–∞–∑–º—É—Ç
<code>.kickall</code> - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å —á–∞—Ç–∞
<code>.kickall hide</code> - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö (—Å–∫—Ä—ã—Ç–æ)
<code>.leave</code> - –í—ã–π—Ç–∏ —Å —á–∞—Ç–∞

[–†–µ–ø—É—Ç–∞—Ü–∏—è, –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—Ä–æ—Å–∏—Ç–µ 2 —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –≤ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "+"]

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–∏—à–∏ @artur_destroyer""", disable_web_page_preview=True)

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
@app.on_message(filters.command("restart" , prefixes=".") & filters.me)
async def restart(client: Client, message: Message):
    await message.edit("<b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...</b>")
    await message.edit("<b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!</b>")
    os.execl(sys.executable, sys.executable, *sys.argv)
    quit()

@app.on_message(filters.command("update" , prefixes=".") & filters.me)
async def info(client: Client, message: Message):
    await message.edit("<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞...</b>")
    os.remove("bot.py")
    url = 'https://raw.githubusercontent.com/A9FM/ClipUserbot/main/bot.py'
    wget.download(url, '')
    await message.edit("<b>–ë–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω...</b>")
    os.execl(sys.executable, sys.executable, *sys.argv)
    quit()

# –†–µ–ø—É—Ç–∞—Ü–∏—è
@app.on_message(filters.text & filters.incoming & filters.regex('^\-$') & filters.reply)
async def rep(client: Client, message: Message):
    if message.reply_to_message.from_user.is_self:
        with open("rep.txt", "r+") as f:
            data = f.read()
            data = int(data)
            num = 1
            rep = data - num
            repo = str(rep)
            f.close()
        with open("rep.txt", "w+") as f:
            repo = str(rep)
            f.write(repo)
            f.close()
            text = "üíî –í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é üíî\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
            await message.reply_text(text)

@app.on_message(filters.text & filters.incoming & filters.regex('^\+$') & filters.reply)
async def rep(client: Client, message: Message):
    if message.reply_to_message.from_user.is_self:
        with open("rep.txt", "r+") as f:
            data = f.read()
            data = int(data)
            num = 1
            rep = data + num
            repo = str(rep)
            f.close()
        with open("rep.txt", "w+") as f:
            repo = str(rep)
            f.write(repo)
            f.close()
            text = "‚ù§Ô∏è –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é ‚ù§Ô∏è\nüîù –†–µ–ø—É—Ç–∞—Ü–∏—è " + str(repo) + " üîù"
            await message.reply_text(text)


# –ê–π–¥–∏
@app.on_message(filters.command('id', prefixes='.') & filters.me)
async def spam(client: Client, message: Message):
    if message.reply_to_message is None:
        await message.edit(f"–¢–≤–æ–π –∞–π–¥–∏: {message.chat.id}")
    else:
        id = f"–¢–≤–æ–π –∞–π–¥–∏: {message.reply_to_message.from_user.id}\n\n–ê–π–¥–∏ –≥—Ä—É–ø–ø—ã: {message.chat.id}"
        await message.edit(id)

# –í—Ä–µ–º—è
@app.on_message(filters.command('time', prefixes='.') & filters.me)
async def spam(client: Client, message: Message):
    now = datetime.datetime.now()
    timnow = now.strftime("%d-%m-%Y %H:%M")
    timenow = "–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ : " + timnow
    await message.edit(timenow)

# —Å–ø–∞–º
@app.on_message(filters.command('spam', prefixes='.') & filters.me)
async def spam(client: Client, message: Message):
        if not message.text.split('.spam', maxsplit=1)[1]:
                await message.edit('<i>–ù–µ—Ç—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.</i>')
                return
        count = message.command[1]
        text = ' '.join(message.command[2:])
        count = int(count)
        await message.delete()
        for _ in range(count):
                await app.send_message(message.chat.id, text)
                await asyncio.sleep(0.01)

# –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞
@app.on_message(filters.command('webshot', prefixes=".") & filters.me)
async def webshot(client, message):
    try:
        if len(message.text.split()) < 2:
        	await message.edit('<i>–ù–µ—Ç—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.</i>')
        	return
        user_link = message.command[1]
        await message.delete()
        full_link = 'https://webshot.deam.io/{}/?width=1920&height=1080?type=png'.format(user_link)
        await client.send_photo(message.chat.id, full_link, caption=f'<b> –°—Å—ã–ª–∫–∞ > {user_link}</b>')
    except:
        await message.edit('<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–π—Ç.</i>')

# –ü—Ä–∏–∑—ã–≤ –≤—Å–µ—Ö
@app.on_message(filters.command("tagall", prefixes=".") & filters.me)
async def tagall(client, message):
    args = ' ! '
    if len(message.text.split()) >= 2:
        args = message.text.split('.tagall ', maxsplit=1)[1]
    await message.delete()
    chat_id = message.chat.id
    string = ""
    limit = 1
    members = client.iter_chat_members(chat_id)
    async for member in members:
        tag = member.user.username
        if limit <= 9:
            list = ['·Ö†', '·Ö†']
            if tag != None:
                w = random.choice(list)
                string += f"<a href='https://t.me/{tag}'>{w}</a> "
            else:
                w = random.choice(list)
                string += f"<a href='tg://user?id={member.user.id}'>{w}</a> "
            limit += 1
        else:
            text = f"{args}{string}"
            await client.send_message(chat_id, text, disable_web_page_preview=1)
            limit = 1
            string = ""
            await asyncio.sleep(2)

# –£–¥–∞–ª–∏—Ç—å —Å–º—Å
@app.on_message(filters.command("del" , prefixes=".") & filters.me)
async def del_msg(client: Client, message: Message):
    if message.reply_to_message:
        message_id = message.reply_to_message.message_id
        await message.delete()
        await client.delete_messages(message.chat.id, message_id)

# –ü—É—Ä–¥–∂
@app.on_message(filters.command('purge', prefixes='.') & filters.me)
async def purge(client: Client, message: Message):
        if message.reply_to_message:
                r = message.reply_to_message.message_id
                m = message.message_id
                msgs = []
                await message.delete()
                v = m - r
                while r != m:
                        msgs.append(int(r))
                        r += 1
                await client.delete_messages(message.chat.id, msgs)
                r = message.reply_to_message.message_id
                msgs = []
                while r != m:
                        msgs.append(int(r))
                        r += 1
                await client.delete_messages(message.chat.id, msgs)
                await app.send_message(message.chat.id, f'<b>–£–¥–∞–ª–µ–Ω–æ > {v} —Å–æ–æ–±—â–µ–Ω–∏–π!</b>')
        else:
                await message.edit('<i>–ê –≥–¥–µ —Ä–µ–ø–ª–∞–π?</i>')

# –ö–æ–º–∞–Ω–¥–∞ type
@app.on_message(filters.command("type", prefixes=".") & filters.me)
async def type(client: Client, message: Message):
    orig_text = message.text.split(".type ", maxsplit=1)[1]
    text = orig_text
    tbp = ""
    typing_symbol = "‚ñí"
    while(tbp != orig_text):
        try:
            joper = tbp + typing_symbol
            await message.edit(str(joper))
            sleep(0.10)
            tbp = tbp + text[0]
            text = text[1:]
            await message.edit(str(tbp))
            sleep(0.10)
        except FloodWait as e:
            sleep(e.x)

# –õ–µ—Å—Ç–Ω–∏—Ü–∞
@app.on_message(filters.command("ladder" , prefixes=".") & filters.me)
async def restart(client: Client, message: Message):
    text = message.command[1]
    output = []
    for i in range(len(text) + 1):
     output.append(text[:i])
    ot = "\n".join(output)
    await message.edit(ot)


# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å –≥—Ä—É–ø–ø—ã (200 —É—á –ª–∏–º–∏—Ç) !!! –°–ö–†–´–¢–û
@app.on_message(filters.command('kickall hide', '.') & filters.me & ~filters.private)
def kickall(client: Client, message: Message):
    message.delete()
    num = 0
    for all in client.iter_chat_members(message.chat.id):
       try:
           num =+ 1
           client.kick_chat_member(message.chat.id, all.user.id, 0)
       except:
           pass

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å –≥—Ä—É–ø–ø—ã (200 —É—á –ª–∏–º–∏—Ç)
@app.on_message(filters.command('kickall', '.') & filters.me & ~filters.private)
def kickall(client: Client, message: Message):
    num = 0
    for all in client.iter_chat_members(message.chat.id):
       try:
           num =+ 1
           client.kick_chat_member(message.chat.id, all.user.id, 0)
       except:
           pass

# –ë–∞–Ω
@app.on_message(filters.command("ban", prefixes=".") & filters.me & ~filters.private)
async def ban(client: Client, message: Message):
    try:
        if not message.reply_to_message:
            await message.edit('<i>–ê –≥–¥–µ —Ä–µ–ø–ª–∞–π?</i>')
            return
        reply = message.reply_to_message
        await app.kick_chat_member(message.chat.id, reply.from_user.id)
        await message.edit(f'<b><a href="tg://user?id={reply.from_user.id}">{reply.from_user.first_name}</a> –∑–∞–±–∞–Ω–µ–Ω!</b>')
    except:
        await message.edit('<i>–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.</i>')

# –ö–∏–∫
@app.on_message(filters.command("kick", prefixes=".") & filters.me & ~filters.private)
async def kick(client: Client, message: Message):
    try:
        if not message.reply_to_message:
            await message.edit('<i>–ê –≥–¥–µ —Ä–µ–ø–ª–∞–π?</i>')
            return
        reply = message.reply_to_message
        await app.kick_chat_member(message.chat.id, reply.from_user.id)
        await app.unban_chat_member(message.chat.id, reply.from_user.id)
        await message.edit(f'<b><a href="tg://user?id={reply.from_user.id}">{reply.from_user.first_name}</a> –∫–∏–∫–Ω—É—Ç!</b>')
    except:
        await message.edit('<i>–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.</i>')

# –ú—É—Ç
@app.on_message(filters.command("mute", prefixes=".") & filters.me & ~filters.private)
async def mute(client: Client, message: Message):
    try:
        if not message.reply_to_message:
            await message.edit('<i>–ê –≥–¥–µ —Ä–µ–ø–ª–∞–π?</i>')
            return
        reply = message.reply_to_message
        await app.restrict_chat_member(message.chat.id, reply.from_user.id, ChatPermissions(can_send_messages=False))
        await message.edit(f'<b><a href="tg://user?id={reply.from_user.id}">{reply.from_user.first_name}</a> –∑–∞–º—É—á–µ–Ω!</b>')
    except:
        await message.edit('<i>–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.</i>')

# –†–∞–∑–º—É—Ç
@app.on_message(filters.command("unmute", prefixes=".") & filters.me & ~filters.private)
async def unmute(client: Client, message: Message):
    try:
        if not message.reply_to_message:
            await message.edit('<i>–ê –≥–¥–µ —Ä–µ–ø–ª–∞–π?</i>')
            return
        reply = message.reply_to_message
        await app.restrict_chat_member(message.chat.id, reply.from_user.id, ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_send_polls=True, can_send_other_messages=True, can_add_web_page_previews=True, can_change_info=False, can_invite_users=True, can_pin_messages=False))
        await message.edit(f'<b><a href="tg://user?id={reply.from_user.id}">{reply.from_user.first_name}</a> —Ä–∞–∑–º—É—á–µ–Ω!</b>')
    except:
        await message.edit('<i>–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.</i>')

# –†–∞–∑–±–∞–Ω
@app.on_message(filters.command("unban", prefixes=".") & filters.me & ~filters.private)
async def unban(client: Client, message: Message):
    try:
        if not message.reply_to_message:
            await message.edit('<i>–ê –≥–¥–µ —Ä–µ–ø–ª–∞–π?</i>')
            return
        reply = message.reply_to_message
        await app.restrict_chat_member(message.chat.id, reply.from_user.id, ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_send_polls=True, can_send_other_messages=True, can_add_web_page_previews=True, can_change_info=False, can_invite_users=True, can_pin_messages=False))
        await message.edit(f'<b><a href="tg://user?id={reply.from_user.id}">{reply.from_user.first_name}</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!</b>')
    except:
                await message.edit('<i>–£ –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.</i>')

# –ò–Ω—Ñ–æ
@app.on_message(filters.command("info", prefixes=".") & filters.me & ~filters.private)
async def info(client: Client, message: Message):
    if message.reply_to_message:
        username = message.reply_to_message.from_user.username
        id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
        user_link = message.reply_to_message.from_user.mention
    else:
        username = message.from_user.username
        id = message.from_user.id
        first_name = message.from_user.first_name
        user_link = message.from_user.mention
    if username:
        username = f"@{username}"
        text = f"""
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
–ê–π–¥–∏: <code>{id}</code>
–ò–º—è: {first_name}
–Æ–∑–µ—Ä–Ω–µ–π–º: {username}
–°—Å—ã–ª–∫–∞: {user_link}"""
    else:
        text = f"""
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
–ê–π–¥–∏: <code>{id}</code>
–ò–º—è: {first_name}
–°—Å—ã–ª–∫–∞: {user_link}"""
    await message.edit(text, parse_mode="HTML")

# –ü–∏–Ω–≥
@app.on_message(filters.command("ping", prefixes=".") & filters.me)
async def ping(client: Client, message: Message):
    start = perf_counter()
    await message.edit('Pong')
    end = perf_counter()
    ping2 = end - start
    ping = ping2 * 1000

    if 0 <= ping <= 199:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\nüü¢–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –°—Ç–∞–±–∏–ª—å–Ω–æ–µüü¢')
    if 199 <= ping <= 400:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\nüü†–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –•–æ—Ä–æ—à–µ–µüü†')
    if 400 <= ping <= 600:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\nüî¥–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –ù–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µüî¥')
    if 600 <= ping:
        await message.edit(f'<b>üèì –ü–æ–Ω–≥\nüì∂</b> {round(ping)} –º—Å\n‚ö†–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –ü–µ—Ä–µ–ø–∞–¥—ã —Å–≤—è–∑–∏‚ö†')

# Covid
@app.on_message(filters.command("covid", prefixes=".") & filters.me)
async def covid_local(client: Client, message: Message):
    region = ' '.join(message.command[1:])
    await message.edit('<code>–ó–∞–≥—Ä—É–∑–∫–∞...</code>')
    covid = Covid(source="worldometers")
    try:
        local_status = covid.get_status_by_country_name(region)
        await message.edit("<b>=======ü¶† COVID-19 STATUS ü¶†=======</b>\n" +
                           f"<b>–†–µ–≥–∏–æ–Ω [–°—Ç—Ä–∞–Ω–∞]</b>: <code>{local_status['country']}</code>\n" +
                           "<b>====================================</b>\n" +
                           f"<b>ü§ß –ù–æ–≤—ã–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è</b>: <code>{local_status['new_cases']}</code>\n" +
                           f"<b>üò∑ –ù–æ–≤—ã–µ —Å–º–µ—Ä—Ç–∏</b>: <code>{local_status['new_deaths']}</code>\n" +
                           "<b>====================================</b>\n" +
                           f"<b>üò∑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ</b>: <code>{local_status['confirmed']}</code>\n" +
                           f"<b>‚ùóÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ [–ó–∞—Ä–∞–∂—ë–Ω–Ω—ã–µ]:</b> <code>{local_status['active']}</code>\n" +
                           f"<b>‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏</b>: <code>{local_status['critical']}</code>\n" +
                           f"<b>üíÄ –°–º–µ—Ä—Ç–µ–π</b>: <code>{local_status['deaths']}</code>\n" +
                           f"<b>üöë –°–ø–∞—Å–µ–Ω–Ω–æ [–í—ã–ª–µ—á–µ–Ω–Ω–æ]</b>: <code>{local_status['recovered']}</code>\n")
    except ValueError:
        await message.edit(f'<code>There is no region called "{region}"</code>')

# –°–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫
linkToken = '6c2ac1846a1c1A2d5f88A3E5fbf0e14fcf96d7d0'
async def link_short(link: str):
    async with ClientSession(
        headers={
            'Authorization': f'API-Key {linkToken}'
        }
    ) as ses:
        async with ses.post(
            'https://api.waa.ai/v2/links',
            json={'url': link}
        ) as resp:
            return await resp.json()

@app.on_message(filters.command("short", prefixes=".") & filters.me)
async def shorten_link_command(client: Client, message: Message):
    if message.reply_to_message:
         link = message.reply_to_message.text
    else:
        try:
            link = message.command[1]
        except IndexError:
            return await message.delete()
    output = (await link_short(link))["data"]
    await message.edit(f'–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {output["link"]}')

# QR-code
content_filter = filters.create(lambda _, __, msg: bool(get_cmd_content(msg)))

def get_cmd_content(message: Message):
    if message.reply_to_message:
        content = message.reply_to_message.text
    elif len(message.text.split(maxsplit=1)) == 2:
        content = message.text.split(maxsplit=1)[1]
    else:
        content = ''
    return content

@app.on_message(filters.command("qr", prefixes=".") & filters.me & content_filter)
async def qr_cmd(_, message: Message):
    text = get_cmd_content(message)
    await message.delete()
    async with ClientSession() as session:
        async with session.head('https://api.qrserver.com/v1/create-qr-code/', params={'data': text}) as resp:
            await app.send_photo(
                chat_id=message.chat.id,
                photo=str(resp.url),
                caption=text,
                parse_mode=None,
            )

# –ó–∞–∫—Ä–µ–ø
@app.on_message(filters.command("pin", prefixes=".") & filters.me)
async def pin(client: Client, message: Message):
    try:
        message_id = message.reply_to_message.message_id
        await client.pin_chat_message(message.chat.id, message_id)
        await message.edit('<code>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ! </code>')
    except:
        await message.edit('<b>–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏—é</b>')

@app.on_message(filters.command("unpin", prefixes=".") & filters.me)
async def pin(client: Client, message: Message):
    try:
        message_id = message.reply_to_message.message_id
        await client.unpin_chat_message(message.chat.id, message_id)
        await message.edit('<code>–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ! </code>')
    except:
        await message.edit('<b>–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏—é</b>')
# –í–∏–∫–∏–ø–µ–¥–∏—è
@app.on_message(filters.command("wiki", prefixes=".") & filters.me)
async def wiki(client: Client, message: Message):
    lang = message.command[1]
    user_request = ' '.join(message.command[2:])
    await message.edit('<b>–ò—â–µ–º –∏–Ω—Ñ—É</b>')
    if user_request == '':
        wikipedia.set_lang("ru")
        user_request = ' '.join(message.command[1:])
    try:
        if lang == 'en':
            wikipedia.set_lang("en")

        result = wikipedia.summary(user_request)
        await message.edit(f'''<b>–°–ª–æ–≤–æ:</b>
<code>{user_request}</code>

<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b>
<code>{result}</code>''')
    except Exception as exc:
        await message.edit(f'''<b>Request:</b>
<code>{user_request}</code>
<b>Result:</b>
<code>{exc}</code>''')
# –ü–µ—Ä–µ–∫–ª—é—è–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
@app.on_message(filters.command("sw", prefixes=".") & filters.me)
async def switch(client: Client, message: Message):
    text = ' '.join(message.command[1:])
    ru_keys = """—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.–Å"‚Ññ;%:?–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠/–Ø–ß–°–ú–ò–¢–¨–ë–Æ,"""
    en_keys = """`qwertyuiop[]asdfghjkl;'zxcvbnm,./~@#$%^&QWERTYUIOP{}ASDFGHJKL:"|ZXCVBNM<>?"""
    if text == '':
        if message.reply_to_message:
            reply_text = message.reply_to_message.text
            change = str.maketrans(ru_keys + en_keys, en_keys + ru_keys)
            reply_text = str.translate(reply_text, change)
            await message.edit(reply_text)
        else:
            await message.edit('–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            await asyncio.sleep(3)
            await message.delete()
    else:
        change = str.maketrans(ru_keys + en_keys, en_keys + ru_keys)
        text = str.translate(text, change)
        await message.edit(text)

# –ü–æ–≥–æ–¥–∞
def get_pic(city):
    file_name = f'{city}.png'
    with open(file_name, 'wb') as pic:
        response = requests.get('http://wttr.in/{citys}_2&lang=ru.png', stream=True)

        if not response.ok:
            print(response)

        for block in response.iter_content(1024):
            if not block:
                break

            pic.write(block)
        return file_name

# –ü–æ–≥–æ–¥–∞
@app.on_message(filters.command("weather", prefixes=".") & filters.me)
async def weather(client: Client, message: Message):
    city = message.command[1]
    await message.edit("```–ó–∞–≥—Ä—É–∑–∫–∞...```")
    r = requests.get(f"https://wttr.in/{city}?m?M?0?q?T&lang=ru")
    await message.edit(f"```City: {r.text}```")
    await client.send_photo(chat_id=message.chat.id, photo=get_pic(city), reply_to_message_id=message.message_id)
    os.remove(f'{city}.png')

# –í—ã–π—Ç–∏ —Å –≥—Ä—É–ø–ø—ã
@app.on_message(filters.command("leave", prefixes=".") & filters.me)
async def leave(client: Client, message: Message):
    m = await message.edit('<code>–í—Å–µ–º –ø–æ–∫–∞... [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª —Å —á–∞—Ç–∞]</code>')
    await asyncio.sleep(3)
    await client.leave_chat(chat_id=message.chat.id)

# –ö–æ–º–∞–Ω–¥–∞ –≤–∑–ª–æ–º–∞ –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞
@app.on_message(filters.command("hack", prefixes=".") & filters.me)
async def hack(client: Client, message: Message):
    perc = 0
    while(perc < 100):
        try:
            text = "üëÆ –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            sleep(0.1)
        except FloodWait as e:
            sleep(e.x)
    text = "‚úÖ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!"
    await message.edit(str(text))
    sleep(3)
    perc = 0
    while(perc < 100):
        try:
            text = "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            sleep(0.15)
        except FloodWait as e:
            sleep(e.x)
        text = "üêì–ù–∞—à–ª–∏ —Ñ–∞–π—Ç—ã —á—Ç–æ —Ç—ã –ø–µ—Ç—É—Ö!"
        await message.edit(text)

# –ö–æ–º–∞–Ω–¥–∞ –í–∑–ª–æ–º–∞ –∂–æ–ø—ã
@app.on_message(filters.command("jopa", prefixes=".") & filters.me)
async def jopa(client: Client, message: Message):
    perc = 0
    while(perc < 100):
        try:
            text = "üçë –í–∑–ª–æ–º –∂–æ–ø—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            sleep(0.1)
        except FloodWait as e:
            sleep(e.x)
    text = "‚úÖ –ñ–æ–ø–∞ –≤–∑–ª–æ–º–∞–Ω–∞"
    await message.edit(str(text))
    sleep(3)
    text = "üîç –ü–æ–∏—Å–∫ –°–ª–∏–≤–æ–≤ ..."
    await message.edit(str(text))
    perc = 0
    sleep(3)
    while(perc < 100):
        try:
            text = "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–ª–∏–≤–æ–≤ ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 4)
            sleep(0.15)
        except FloodWait as e:
            sleep(e.x)
    text = "‚úÖ –°–ª–∏–≤—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã"
    await message.edit(str(text))
    perc = 0
    sleep(5)
    while(perc < 100):
        try:
            text = "‚¨ÜÔ∏è –ü—Ä–æ–¥–∞–∂–∞ —Å–ª–∏–≤–æ–≤ –±–∞—Ä—ã–≥–µ..." + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            sleep(0.15)
        except FloodWait as e:
            sleep(e.x)

    text = "‚úÖ –ü—Ä–æ–¥–∞–Ω–Ω–æ"
    await message.edit(str(text))
    sleep(2)
    rand =+ random.randint(100, 5000)
    bal = rand
    text = "üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ " + str(bal) + " ‚ÇΩ"
    await message.edit(text)

# –ù–∞—Ä–∫–æ—Ç–∞
@app.on_message(filters.command("drugs", prefixes=".") & filters.me)
async def drugs(client: Client, message: Message):
    perc = 0
    result = 0
    while(perc < 100):
        try:
            text = "üçÅ–ü–æ–∏—Å–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            sleep(0.1)
        except FloodWait as e:
            sleep(e.x)
    text = "–ù–∞–π–¥–µ–Ω–æ 3 –∫–≥ —à–ø–µ–∫—Å–∞üç™üí®"
    await message.edit(str(text))
    sleep(3)
    text = "–û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∫–∏–¥ üåø‚öóÔ∏è"
    await message.edit(str(text))
    sleep(5)
    result += random.randint(1, 4)

    if result == 1:
        text = "üî•üò≥ –í–∞—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–∞–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã üò≥üî•"
        await message.edit(str(text))
    if result == 2:
        text = "ü•¥–í—ã –ø–æ–∂–∏–ª–æ–π –Ω–∞—Ä–∫–æ–º–∞–Ω, –≤–∞—Å –Ω–µ –±–µ—Ä—ë—Ç –æ–¥–Ω–∞ –¥–æ–∑–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ  –µ—â—ë —Ä–∞–∑ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∫–∏–¥ü•¥"
        await message.edit(str(text))
    if result == 3:
        text = "üòñ–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤–∞—à –¥–µ–Ω—å, –≤—ã —Ö–æ—Ç—å –∏ –ø–æ–∂–∏–ª–æ–π, –Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å–º–µ—Ä—Ç–∏ - –ø–µ—Ä–µ–¥–æ–∑üòñ"
        await message.edit(str(text))
    if result == 4:
        text = "üòå–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –≤–∫–∏–¥, –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å)üòå"
        await message.edit(str(text))

# –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –º–∞–º–∫–∏
@app.on_message(filters.command("mum" , prefixes=".") & filters.me)
async def mum(client: Client, message: Message):
    text = "üîç –ü–æ–∏—Å–∫ —Ç–≤–æ–µ–π –º–∞–º–∫–∏ –Ω–∞—á–∞–ª—Å—è..."
    await message.edit(str(text))
    sleep(3.0)
    perc = 0
    while(perc < 100):
        try:
            text = "üîç –ò—â–µ–º —Ç–≤–æ—é –º–∞–º–∞—à—É –Ω–∞ –ê–≤–∏—Ç–æ... " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 3)
            sleep(0.75)
        except FloodWait as e:
            sleep(e.x)
    text = "‚ùå –ú–∞–º–∞—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–∞"
    await message.edit(str(text))
    sleep(3.0)

    perc = 0
    while(perc < 100):
        try:
            text = "üîç –ü–æ–∏—Å–∫ —Ç–≤–æ–µ–π –º–∞–º–∞—à–∏ –Ω–∞ —Å–≤–∞–ª–∫–µ... " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            sleep(0.75)
        except FloodWait as e:
            sleep(e.x)
    text = "‚ùå –ú–∞–º–∞—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–∞"
    await message.edit(str(text))

    perc = 0
    while(perc < 100):
        try:
            text = "üîç –ü–æ–∏—Å–∫ —Ç–≤–æ–µ–π –º–∞–º–∫–∏ –≤ –∫–∞–Ω–∞–≤–µ... " + str(perc) + "%"
            await message.edit(str(text))
            perc += random.randint(1, 5)
            sleep(0.75)
        except FloodWait as e:
            sleep(e.x)
    text = "‚úÖ –ú–∞–º–∫–∞ –Ω–∞–π–¥–µ–Ω–∞... –û–Ω–∞ –≤ –∫–∞–Ω–∞–≤–µ"
    await message.edit(str(text))

# –°–ü–ê–ú
@app.on_message (filters.command("spamt" , prefixes=".") & filters.me)
async def spamt(client: Client, message: Message):
    global spam
    spam = 0
    while(spam < 1000000):
        try:
            await message.reply_text("–°–ø–∞–º!!!")
            spam += 1
        except FloodWait as e:
            sleep(e.x)

@app.on_message(filters.command("spams", prefixes=".") & filters.me)
async def spams(client: Client, message: Message):
    global spam
    spam = 0
    while(spam < 1000000):
        try:
            await message.reply_text("üò°")
            spam += 1
        except FloodWait as e:
            sleep(e.x)

# –°—Ç–æ–ø —Å–ø–∞–º
@app.on_message (filters.command("stop" , prefixes=".") & filters.me)
async def stam(client: Client, message: Message):
        global spam
        spam = 0
        await message.reply_text("–°—Ç–æ–ø —Å–ø–∞–º...")
        spam += 1000000

# AFK
async def afk_handler(client: Client, message: Message):
    try:
        global start, end
        end = datetime.datetime.now().replace(microsecond=0)
        afk_time = (end - start)
        if message.from_user.is_bot is False:
            await message.reply_text(f"<b>–Ø –ê–§–ö —É–∂–µ {afk_time}</b>\n"
                                     f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>")
    except NameError:
        pass

@app.on_message (filters.command("afk" , prefixes=".") & filters.me)
async def afk(client: Client, message: Message):
    global start, end, handler, reason
    start = datetime.datetime.now().replace(microsecond=0)
    handler = client.add_handler(MessageHandler(afk_handler, (filters.private & ~filters.me)))
    if len(message.text.split()) >= 2:
        reason = message.text.split(" ", maxsplit=1)[1]
    else:
        reason = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    await message.edit(f"<b>–¢–µ–ø–µ—Ä—å —è –ê–§–ö</b>\n"
                       f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>")

# No AFK
@app.on_message (filters.command("unafk" , prefixes=".") & filters.me)
async def unafk(client: Client, message: Message):
    try:
        global start, end
        end = datetime.datetime.now().replace(microsecond=0)
        afk_time = (end - start)
        await message.edit(f"<b>–Ø —Ç–µ–ø–µ—Ä—å –Ω–µ –ê–§–ö.\n–ë—ã–ª –≤ –∞—Ñ–∫ {afk_time}</b>")
        client.remove_handler(*handler)
    except NameError:
        await message.edit("<b>–Ø –Ω–µ –±—ã–ª –≤ –ê–§–ö</b>")
        await asyncio.sleep(3)
        await message.delete()

# –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.command("hide", prefixes=".") & filters.me)
async def hide(client: Client, message: Message):
    orig_text = message.text.split(".hide ", maxsplit=1)[1]
    text = orig_text
    tbp = ""
    typing_symbol = "‚ñí"
    while(tbp != orig_text):
        try:
            joper = tbp + typing_symbol
            await message.edit(str(joper))
            sleep(0.10)
            tbp = tbp + text[0]
            text = text[1:]
            await message.edit(str(tbp))
            sleep(0.10)
        except FloodWait as e:
            sleep(e.x)

    sleep(1.25)
    await message.delete()

# –ö—É—Ä—Å –≤–∞–ª—é—Ç
DOLLAR = 'https://www.google.com/search?sxsrf=ALeKk01NWm6viYijAo3HXYOEQUyDEDtFEw%3A1584716087546&source=hp&ei=N9l0XtDXHs716QTcuaXoAg&q=%D0%B4%D0%BE%D0%BB%D0%BB%D0%B0%D1%80+%D0%BA+%D1%80%D1%83%D0%B1%D0%BB%D1%8E&oq=%D0%B4%D0%BE%D0%BB%D0%BB%D0%B0%D1%80+&gs_l=psy-ab.3.0.35i39i70i258j0i131l4j0j0i131l4.3044.4178..5294...1.0..0.83.544.7......0....1..gws-wiz.......35i39.5QL6Ev1Kfk4'
EUR = 'https://www.google.com/search?q=%D0%BA%D1%83%D1%80%D1%81+%D0%B5%D0%B2%D1%80%D0%BE&oq=%D0%BA%D1%83%D1%80%D1%81+%D0%B5&aqs=chrome.1.69i57j0i433l5j0i395i433l2j0i131i395i433.3879j1j7&sourceid=chrome&ie=UTF-8'

headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'}

@app.on_message(filters.command("usd", prefixes=".") & filters.me)
async def usd(client: Client, message: Message):
    try:
        await message.edit('<code>–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</code>')
        full_page = requests.get(DOLLAR, headers=headers, timeout=1)
        soup = BeautifulSoup(full_page.content, 'html.parser')
        rub = soup.findAll(
            "span", {"class": "DFlfde", "class": "SwHCTb", "data-precision": 2})
        await message.edit(f'<b>1 –î–æ–ª–ª–∞—Ä —Ä–∞–≤–µ–Ω </b><code>{rub}</code><b> –†—É–±–ª—è–º</b>')
    except:
        await message.edit('<code>–û—à–∏–±–∫–∞</code>')

@app.on_message(filters.command("eur", prefixes=".") & filters.me)
async def eur(client: Client, message: Message):
    try:
        await message.edit('<code>–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</code>')
        full_page = requests.get(EUR, headers=headers, timeout=1)
        soup = BeautifulSoup(full_page.content, 'html.parser')
        rub = soup.findAll(
            "span", {"class": "DFlfde", "class": "SwHCTb", "data-precision": 2})
        await message.edit(f'<b>1 –ï–≤—Ä–æ —Ä–∞–≤–µ–Ω </b><code>{rub}</code><b> –†—É–±–ª—è–º</b>')
    except:
        await message.edit('<code>–û—à–∏–±–∫–∞</code>')

# –ü–ª–∞–≥–∏–Ω —Ä–∞–∑—Ä–∞–±–∞
@app.on_message(filters.command("a9fm", prefixes=".") & filters.me)
async def stap(client: Client, message: Message):
    perc = 0
    while(perc < 25):
        try:
            await message.edit("ArturDestroyer")
            sleep(0.75)
            await message.edit("Hacker")
            sleep(0.75)
            await message.edit("A9FM")
            sleep(0.75)
            await message.edit("Anonymous")
            sleep(0.75)
            await message.edit("Python developer")
            sleep(0.75)
            await message.edit("Destroyer")
            sleep(0.75)
            await message.edit("Rox Tigers Top")
            sleep(0.75)
            await message.edit("Create UserBot_Clip")
            sleep(0.75)
            await message.edit("Vzlom Jopi")
            sleep(0.75)
            await message.edit("Hack You")
            sleep(0.75)
            await message.edit("I am use CLIP UserBot")
            sleep(0.75)
            perc += 1
        except FloodWait as e:
            sleep(e.x)
    await message.edit("@artur_destroyer")

app.run()
